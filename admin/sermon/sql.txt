-- Create the download_logs table first if it doesn't exist
CREATE TABLE IF NOT EXISTS download_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT NOT NULL,
    sermon_id INT NOT NULL,
    download_type ENUM('audio', 'slides', 'complete') NOT NULL,
    file_size BIGINT DEFAULT 0,
    downloaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (member_id) REFERENCES members(id) ON DELETE CASCADE,
    FOREIGN KEY (sermon_id) REFERENCES sermons(id) ON DELETE CASCADE,
    INDEX idx_member_id (member_id),
    INDEX idx_sermon_id (sermon_id),
    INDEX idx_download_type (download_type),
    INDEX idx_downloaded_at (downloaded_at)
);

-- Create a view for sermon download statistics
CREATE OR REPLACE VIEW sermon_download_stats AS
SELECT 
    s.id,
    s.title,
    s.speaker,
    s.created_at,
    s.member_id,
    m.first_name,
    m.second_name,
    COUNT(dl.id) as total_downloads,
    COUNT(CASE WHEN dl.download_type = 'audio' THEN 1 END) as audio_downloads,
    COUNT(CASE WHEN dl.download_type = 'slides' THEN 1 END) as slides_downloads,
    COUNT(CASE WHEN dl.download_type = 'complete' THEN 1 END) as complete_downloads,
    COALESCE(SUM(dl.file_size), 0) as total_downloaded_bytes,
    MAX(dl.downloaded_at) as last_download_date,
    MIN(dl.downloaded_at) as first_download_date
FROM sermons s
LEFT JOIN members m ON s.member_id = m.id
LEFT JOIN download_logs dl ON s.id = dl.sermon_id
GROUP BY s.id, s.title, s.speaker, s.created_at, s.member_id, m.first_name, m.second_name
ORDER BY s.created_at DESC;

-- Create a view for member download statistics
CREATE OR REPLACE VIEW member_download_stats AS
SELECT 
    m.id as member_id,
    m.first_name,
    m.second_name,
    m.third_name,
    COUNT(dl.id) as total_downloads,
    COUNT(CASE WHEN dl.download_type = 'audio' THEN 1 END) as audio_downloads,
    COUNT(CASE WHEN dl.download_type = 'slides' THEN 1 END) as slides_downloads,
    COUNT(CASE WHEN dl.download_type = 'complete' THEN 1 END) as complete_downloads,
    COALESCE(SUM(dl.file_size), 0) as total_downloaded_bytes,
    COUNT(DISTINCT dl.sermon_id) as unique_sermons_downloaded,
    MAX(dl.downloaded_at) as last_download_date,
    MIN(dl.downloaded_at) as first_download_date
FROM members m
LEFT JOIN download_logs dl ON m.id = dl.member_id
GROUP BY m.id, m.first_name, m.second_name, m.third_name
ORDER BY total_downloads DESC;

-- Create a view for popular sermons (most downloaded)
CREATE OR REPLACE VIEW popular_sermons AS
SELECT 
    s.id,
    s.title,
    s.speaker,
    s.created_at,
    COUNT(dl.id) as download_count,
    COALESCE(SUM(dl.file_size), 0) as total_downloaded_bytes,
    COUNT(DISTINCT dl.member_id) as unique_downloaders,
    MAX(dl.downloaded_at) as last_download_date
FROM sermons s
LEFT JOIN download_logs dl ON s.id = dl.sermon_id
GROUP BY s.id, s.title, s.speaker, s.created_at
HAVING download_count > 0
ORDER BY download_count DESC, unique_downloaders DESC;

-- Query to get detailed download activity (for reports)
-- This is a regular query, not a view, as it's meant for specific reporting
-- SELECT 
--     dl.id,
--     dl.downloaded_at,
--     dl.download_type,
--     dl.file_size,
--     s.title as sermon_title,
--     s.speaker,
--     s.created_at as sermon_date,
--     CONCAT(m.first_name, ' ', m.second_name) as downloaded_by,
--     m.email as downloader_email
-- FROM download_logs dl
-- JOIN sermons s ON dl.sermon_id = s.id
-- JOIN members m ON dl.member_id = m.id
-- ORDER BY dl.downloaded_at DESC;